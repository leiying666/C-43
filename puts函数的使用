其中，str 参数是一个字符串常量或者字符串变量，用于指定要输出的字符串。

puts() 函数会将指定的字符串输出到标准输出设备（通常是控制台）上，并在字符串末尾自动添加一个换行符\n。在本篇文章中，我们将详细介绍一下 puts() 函数的用法。
使用puts()输出字符串
使用 puts() 函数输出字符串非常简单。只需要在函数调用中指定一个字符串常量或者字符串变量即可。例如：
#include <stdio.h>
int main() {
    char* str = "Hello, world!";
    puts(str);
    return 0;
}
在上面的代码中，我们定义了一个字符串变量 str，并将其初始化为"Hello, world!"。然后，我们调用 puts() 函数输出该字符串。运行结果如下：
Hello, world!

可以看到，puts() 函数将指定的字符串输出到了标准输出设备上，并在末尾自动添加了一个换行符。

需要注意的是，puts() 函数只能输出字符串，不能输出其他类型的数据。如果需要输出其他类型的数据，需要使用其他输出函数，比如 printf() 函数。
输出多个字符串
puts() 函数可以用于输出多个字符串。只需要多次调用该函数，并分别传入不同的字符串即可。例如：
#include <stdio.h>
int main() {
    puts("Line 1");
    puts("Line 2");
    puts("Line 3");
    return 0;
}
在上面的代码中，我们多次调用 puts() 函数输出了三个字符串。运行结果如下：
Line 1
Line 2
Line 3

需要注意的是，每个字符串都会自动换行，因为 puts() 函数会在每个字符串末尾自动添加一个换行符。
输出空字符串
如果需要输出一个空字符串，可以将空字符串作为 puts() 函数的参数。例如：
#include <stdio.h>
int main() {
    puts("");
    return 0;
}
在上面的代码中，我们将一个空字符串作为 puts() 函数的参数，运行结果如下：
 

可以看到，puts() 函数输出了一个空行，因为空字符串被当作一个只包含换行符的字符串来处理。


取自 C语言中文网
