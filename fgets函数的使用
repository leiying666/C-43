fgets()（函数原型：char *fgets(char *restrict str, int size, FILE *restrict stream)）
这个函数原型不太好看出个所以然来，可以理解为（char *fgets(“容器的地址”， “容器的大小”， “从哪里读取”)）

一般用法：
char a[100] = {0};
fgets(a, 100, stdin);

通俗来讲的话，fgets()函数的作用就是用来读取一行数据的。但要详细且专业的说的话，fgets()函数的作用可以这么解释：从第三个参数指定的流中读取最多第二个参数大小的字符到第一个参数指定的容器地址中。在这个过程中，在还没读取够第二个参数指定大小的字符前，读取到换行符'\n'或者需要读取的流中已经没有数据了。则提前结束，并把已经读取到的字符存储进第一个参数指定的容器地址中。

在正常情况下fgets()函数的返回值和它第一个参数相同。即读取到数据后存储的容器地址。但是如果读取出错或读取文件时文件为空，则返回一个空指针。

fgets()函数的运行流程大概是这样子的:
当系统调用这个函数的时，系统便会阻塞等待用户的输入，直到用户输入回车符’\n’才返回程序。然后用户输入的内容会被系统放进输入缓存区里面，fgets()函数便会进来读取其“第二个参数减1（为什么减1后面说）”个字节存进它第一个参数指向的内存地址中，如果在还没读取够需要的字节大小前读取到换行符’\n’则提前返回。

fgets()函数的注意事项1
fgets()函数的最大读取大小是其“第二个参数减1”，这是由于字符串是以’\0’为结束符的，fgets()为了保证输入内容的字符串格式，当输入的数据大小超过了第二个参数指定的大小的时候，fgets()会仅仅读取前面的“第二个参数减1”个字符，而预留1个字符的空间来存储字符串结束符’\0’。

测试代码
#include <stdio.h>
int main(void)
{
    char a[10] = {0};
    printf("你的输入：");
    fgets(a, 4, stdin);
    //printf("%s\n", a);//下面这句的输出和这句是一样的
    printf("printf(\"%%s\\n\", a)%c==>%s\n", ';', a);
    return 0;
}

运行效果：
在这里插入图片描述

在这个例子中，fgets()的第二个参数是4，所以它最多只能存储输入的（4-1 = 3）个字符进第一个参数指向的地址空间里面。输入“abcde”，数组a[]中只有“abc”。

fgets()函数的注意事项2
在fgets()函数的眼里，换行符’\n’也是它要读取的一个普通字符而已。在读取键盘输入的时候会把最后输入的回车符也存进数组里面，即会把’\n’也存进数组里面，而又由于字符串本身会是以’\0’结尾的。所以在输入字符个数没有超过第二个参数指定大小之前，你输入n个字符按下回车输入，fgets()存储进第一个参数指定内存地址的是n+2个字节。最后面会多出一个’\n’和一个’\0’，而且’\n’是在’\0’的前面一个（\n\0）。

测试代码：
#include <stdio.h>
int main(void)
{
    char a[10] = {0};
    printf("你的输入：");
    fgets(a, 10, stdin);
    //printf("%s\n", a);//下面这句的输出和这句是一样的
    printf("printf(\"%%s\\n\", a)%c==>%s\n", ';', a);
    for(int i=0; i<10; i++)
    {
        if(a[i] == '\n')
            printf("a[%d]是换行符'\\n'\n", i);
        if(a[i] == '\0')
            printf("a[%d]是字符串结束符'\\0'\n", i);
    }
    return 0;
}

运行效果：
在这里插入图片描述
在这个例子中，由于输入的字符小于参数2指定的最大读取字符数，所以fgets()函数会把换行符’\n’也储存进数组a[]里面，在运行界面的第三行哪里换了两次行，就是由于这个多出来的换行符’\n’和我输出代码中的换行符’\n’共同作用的结果。

fgets()函数的注意事项3
fgets()函数只负责读取，并不会事先清空参数1指向的地址内存。读取到的字节会覆盖原地址储存，但没有覆盖到的内容还是保持原样。

测试代码：
#include <stdio.h>
int main(void)
{
    char a[10] = {'1','1','1','1','1','1','1','1','1','1'};
    printf("你的输入：");
    fgets(a, 10, stdin);
    //printf("%s\n", a);//下面这句的输出和这句是一样的
    printf("printf(\"%%s\\n\", a)%c==>%s\n", ';', a);
    for(int i=0; i<10; i++)
    {
        if(a[i] == '\n' || a[i] == '\0')
            printf("a[%d] = '\\%c'", i, a[i]=='\n'?'n':'0');
        else
            printf("a[%d] = %c", i, a[i]);
        printf("\n");
    }
    return 0;
}
 

运行结果：
在这里插入图片描述

fgets()函数的注意事项4
在用fgets()函数读取键盘输入的时候，如果输入多于其“第二个参数减1”个字符大小的数据，fgets()只会读取走前”第二个参数减1”个字符，多余的字符残留在输入缓存区里面。如果不清空，可能会影响下次输入。

测试代码：
#include <stdio.h>
int main(void)
{
    char a[4] = {0};
    char b[10] = {0};
    printf("存进a的输入：");
    fgets(a, 4, stdin);
    for(int i=0; i<4; i++)
        printf("a[%d] = %c\n", i, a[i]);
    printf("存进b的输入：");
    fgets(b, 10, stdin);
    printf("这里没有阻塞等待输入，而是直接跳过了\n");
    //printf("%s", a);//下面这句的输出和这句是一样的
    printf("printf(\"%%s\", b)%c==>%s", ';', b);
    return 0;
}
 

运行结果：
在这里插入图片描述

在这个例子中，输入“abcde”之后，数组a[]读取走“abc”之后，代码运行到第11行的时候并没有停下来等待用户的输入，而是直接读取了还留在缓存区里面的“de\n”，读取到‘\n’之后返回，所以我最后一行的输出代码中并没有加上换行符’\n’，因为数组b[]中已经包含有换行符’\n’了。
